/*
 * This file is generated by jOOQ.
 */
package com.invillia.acme.jooq.tables;


import com.invillia.acme.jooq.Acme;
import com.invillia.acme.jooq.Indexes;
import com.invillia.acme.jooq.Keys;
import com.invillia.acme.jooq.tables.records.OrderStatusRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderStatus extends TableImpl<OrderStatusRecord> {

    private static final long serialVersionUID = 1640846259;

    /**
     * The reference instance of <code>acme.order_status</code>
     */
    public static final OrderStatus ORDER_STATUS = new OrderStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderStatusRecord> getRecordType() {
        return OrderStatusRecord.class;
    }

    /**
     * The column <code>acme.order_status.id</code>.
     */
    public final TableField<OrderStatusRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>acme.order_status.name</code>.
     */
    public final TableField<OrderStatusRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>acme.order_status</code> table reference
     */
    public OrderStatus() {
        this(DSL.name("order_status"), null);
    }

    /**
     * Create an aliased <code>acme.order_status</code> table reference
     */
    public OrderStatus(String alias) {
        this(DSL.name(alias), ORDER_STATUS);
    }

    /**
     * Create an aliased <code>acme.order_status</code> table reference
     */
    public OrderStatus(Name alias) {
        this(alias, ORDER_STATUS);
    }

    private OrderStatus(Name alias, Table<OrderStatusRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderStatus(Name alias, Table<OrderStatusRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderStatus(Table<O> child, ForeignKey<O, OrderStatusRecord> key) {
        super(child, key, ORDER_STATUS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Acme.ACME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_STATUS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderStatusRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_STATUS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderStatusRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderStatusRecord>>asList(Keys.KEY_ORDER_STATUS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderStatus as(String alias) {
        return new OrderStatus(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrderStatus as(Name alias) {
        return new OrderStatus(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderStatus rename(String name) {
        return new OrderStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderStatus rename(Name name) {
        return new OrderStatus(name, null);
    }
}
